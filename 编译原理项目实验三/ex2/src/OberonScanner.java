/* The following code was generated by JFlex 1.4.1 on 2019/6/18 下午8:34 */

import java.io.*;
import exceptions.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 2019/6/18 下午8:34 from the specification file
 * <tt>D:/学习资料/大三下/编译原理课程项目/3/ex2/src/oberon.flex</tt>
 */
public class OberonScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\3\2\0"+
    "\1\54\1\7\1\0\1\55\1\0\1\4\1\6\1\5\1\56\1\46"+
    "\1\57\1\47\1\0\1\12\7\13\2\11\1\45\1\44\1\52\1\50"+
    "\1\51\2\0\1\21\1\15\1\34\1\27\1\20\1\32\1\25\1\31"+
    "\1\23\2\7\1\17\1\35\1\22\1\16\1\40\1\7\1\26\1\33"+
    "\1\24\1\36\1\41\1\30\1\7\1\37\1\7\1\42\1\0\1\43"+
    "\1\0\1\7\1\0\1\21\1\15\1\34\1\27\1\20\1\32\1\25"+
    "\1\31\1\23\2\7\1\17\1\35\1\22\1\16\1\40\1\7\1\26"+
    "\1\33\1\24\1\36\1\41\1\30\1\7\1\37\1\7\1\0\1\14"+
    "\1\0\1\53\41\10\2\0\4\7\4\0\1\7\2\0\1\10\7\0"+
    "\1\7\4\0\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0"+
    "\14\7\16\0\5\7\7\0\1\7\1\0\1\7\21\0\160\10\5\7"+
    "\1\0\2\7\2\0\4\7\1\0\1\7\6\0\1\7\1\0\3\7"+
    "\1\0\1\7\1\0\24\7\1\0\123\7\1\0\213\7\1\0\5\10"+
    "\2\0\246\7\1\0\46\7\2\0\1\7\7\0\47\7\7\0\1\7"+
    "\1\0\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10"+
    "\10\0\33\7\5\0\3\7\15\0\6\10\5\0\1\7\4\0\13\10"+
    "\1\0\1\10\3\0\53\7\37\10\4\0\2\7\1\10\143\7\1\0"+
    "\1\7\10\10\1\0\6\10\2\7\2\10\1\0\4\10\2\7\12\10"+
    "\3\7\2\0\1\7\17\0\1\10\1\7\1\10\36\7\33\10\2\0"+
    "\131\7\13\10\1\7\16\0\12\10\41\7\11\10\2\7\4\0\1\7"+
    "\5\0\26\7\4\10\1\7\11\10\1\7\3\10\1\7\5\10\22\0"+
    "\31\7\3\10\104\0\25\7\56\0\41\10\66\7\3\10\1\7\22\10"+
    "\1\7\7\10\12\7\2\10\2\0\12\10\1\0\20\7\3\10\1\0"+
    "\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0"+
    "\4\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10\1\7"+
    "\10\0\1\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10\4\7"+
    "\7\0\1\7\5\0\3\10\1\0\6\7\4\0\2\7\2\0\26\7"+
    "\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\10"+
    "\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0\4\7"+
    "\1\0\1\7\7\0\14\10\3\7\1\10\13\0\3\10\1\0\11\7"+
    "\1\0\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7"+
    "\2\0\1\10\1\7\10\10\1\0\3\10\1\0\3\10\2\0\1\7"+
    "\17\0\2\7\2\10\2\0\12\10\1\0\1\7\7\0\1\7\7\0"+
    "\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\5\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0"+
    "\3\10\10\0\2\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10"+
    "\1\0\1\7\20\0\1\10\1\7\1\0\6\7\3\0\3\7\1\0"+
    "\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0"+
    "\3\7\3\0\14\7\4\0\5\10\3\0\3\10\1\0\4\10\2\0"+
    "\1\7\6\0\1\10\16\0\12\10\11\0\1\7\6\0\4\10\1\0"+
    "\10\7\1\0\3\7\1\0\27\7\1\0\20\7\3\0\1\7\7\10"+
    "\1\0\3\10\1\0\4\10\7\0\2\10\1\0\3\7\5\0\2\7"+
    "\2\10\2\0\12\10\21\0\3\10\1\0\10\7\1\0\3\7\1\0"+
    "\27\7\1\0\12\7\1\0\5\7\2\0\1\10\1\7\7\10\1\0"+
    "\3\10\1\0\4\10\7\0\2\10\7\0\1\7\1\0\2\7\2\10"+
    "\2\0\12\10\1\0\2\7\16\0\3\10\1\0\10\7\1\0\3\7"+
    "\1\0\51\7\2\0\1\7\7\10\1\0\3\10\1\0\4\10\1\7"+
    "\10\0\1\10\7\0\3\7\2\10\2\0\12\10\12\0\6\7\2\0"+
    "\2\10\1\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0"+
    "\7\7\3\0\1\10\4\0\6\10\1\0\1\10\1\0\10\10\6\0"+
    "\12\10\2\0\2\10\15\0\60\7\1\10\2\7\7\10\4\0\10\7"+
    "\10\10\1\0\12\10\47\0\2\7\1\0\1\7\2\0\2\7\1\0"+
    "\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0"+
    "\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\10\2\7\6\10"+
    "\1\0\2\10\1\7\2\0\5\7\1\0\1\7\1\0\6\10\2\0"+
    "\12\10\2\0\4\7\40\0\1\7\27\0\2\10\6\0\12\10\13\0"+
    "\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\7\1\0\44\7"+
    "\4\0\24\10\1\0\2\10\5\7\13\10\1\0\44\10\11\0\1\10"+
    "\71\0\53\7\24\10\1\7\12\10\6\0\6\7\4\10\4\7\3\10"+
    "\1\7\3\10\2\7\7\10\3\7\4\10\15\7\14\10\1\7\17\10"+
    "\2\0\46\7\1\0\1\7\5\0\1\7\2\0\53\7\1\0\u014d\7"+
    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\51\7"+
    "\1\0\4\7\2\0\41\7\1\0\4\7\2\0\7\7\1\0\1\7"+
    "\1\0\4\7\2\0\17\7\1\0\71\7\1\0\4\7\2\0\103\7"+
    "\2\0\3\10\40\0\20\7\20\0\126\7\2\0\6\7\3\0\u026c\7"+
    "\2\0\21\7\1\0\32\7\5\0\113\7\3\0\13\7\7\0\15\7"+
    "\1\0\4\7\3\10\13\0\22\7\3\10\13\0\22\7\2\10\14\0"+
    "\15\7\1\0\3\7\1\0\2\10\14\0\64\7\40\10\3\0\1\7"+
    "\3\0\2\7\1\10\2\0\12\10\41\0\4\10\1\0\12\10\6\0"+
    "\130\7\10\0\51\7\1\10\1\7\5\0\106\7\12\0\37\7\1\0"+
    "\14\10\4\0\14\10\12\0\12\10\36\7\2\0\5\7\13\0\54\7"+
    "\4\0\32\7\6\0\12\10\46\0\27\7\5\10\4\0\65\7\12\10"+
    "\1\0\35\10\2\0\13\10\6\0\12\10\15\0\1\7\10\0\16\10"+
    "\102\0\5\10\57\7\21\10\7\7\4\0\12\10\21\0\11\10\14\0"+
    "\3\10\36\7\15\10\2\7\12\10\54\7\16\10\14\0\44\7\24\10"+
    "\10\0\12\10\3\0\3\7\12\10\44\7\122\0\3\10\1\0\25\10"+
    "\4\7\1\10\4\7\3\10\2\7\1\0\2\10\6\0\300\7\66\10"+
    "\6\0\4\10\u0116\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\37\7\2\0"+
    "\65\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0"+
    "\4\7\2\0\6\7\4\0\15\7\5\0\3\7\1\0\7\7\16\0"+
    "\5\10\32\0\5\10\20\0\2\7\23\0\1\7\13\0\5\10\1\0"+
    "\12\10\1\0\1\7\15\0\1\7\20\0\15\7\3\0\37\7\21\0"+
    "\15\10\4\0\1\10\3\0\14\10\21\0\1\7\4\0\1\7\2\0"+
    "\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0"+
    "\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0\205\7\6\0"+
    "\4\7\3\10\2\7\14\0\46\7\1\0\1\7\5\0\1\7\2\0"+
    "\70\7\7\0\1\7\17\0\1\10\27\7\11\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7"+
    "\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0\2\10\2\0"+
    "\3\7\1\0\132\7\1\0\4\7\5\0\51\7\3\0\136\7\21\0"+
    "\33\7\65\0\20\7\u0200\0\u19b6\7\112\0\u51d6\7\52\0\u048d\7\103\0"+
    "\56\7\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7\1\10"+
    "\4\0\12\10\1\0\37\7\2\10\120\7\2\10\45\0\11\7\2\0"+
    "\147\7\2\0\43\7\2\0\10\7\77\0\13\7\1\10\3\7\1\10"+
    "\4\7\1\10\27\7\5\10\20\0\1\7\7\0\64\7\14\0\2\10"+
    "\62\7\21\10\13\0\12\10\6\0\22\10\6\7\3\0\1\7\1\0"+
    "\1\7\2\0\12\10\34\7\10\10\2\0\27\7\15\10\14\0\35\7"+
    "\3\0\4\10\57\7\16\10\16\0\1\7\12\10\6\0\5\7\1\10"+
    "\12\7\12\10\5\7\1\0\51\7\16\10\11\0\3\7\1\10\10\7"+
    "\2\10\2\0\12\10\6\0\27\7\3\0\1\7\3\10\62\7\1\10"+
    "\1\7\3\10\2\7\2\10\5\7\2\10\1\7\1\10\1\7\30\0"+
    "\3\7\2\0\13\7\5\10\2\0\3\7\2\10\12\0\6\7\2\0"+
    "\6\7\2\0\6\7\11\0\7\7\1\0\7\7\1\0\53\7\1\0"+
    "\12\7\12\0\163\7\10\10\1\0\2\10\2\0\12\10\6\0\u2ba4\7"+
    "\14\0\27\7\4\0\61\7\u2104\0\u016e\7\2\0\152\7\46\0\7\7"+
    "\14\0\5\7\5\0\1\7\1\10\12\7\1\0\15\7\1\0\5\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7"+
    "\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\10\20\0\20\10"+
    "\3\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7\1\0\207\7"+
    "\2\0\1\10\4\0\1\7\13\0\12\10\7\0\32\7\4\0\1\7"+
    "\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7\2\0\6\7"+
    "\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\16\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\4\0"+
    "\2\26\1\27\2\30\2\6\1\31\1\32\4\6\1\33"+
    "\4\6\1\34\10\6\1\35\1\36\1\0\2\30\3\6"+
    "\1\37\7\6\1\40\4\6\1\41\1\6\1\42\1\26"+
    "\1\43\2\6\1\44\3\6\1\45\1\46\1\47\1\50"+
    "\7\6\1\43\1\6\1\51\1\52\1\53\2\6\1\54"+
    "\1\55\1\56\1\57\2\6\1\26\1\0\2\6\1\60"+
    "\1\6\1\61\1\6\1\26\1\62\1\63\1\64\2\6"+
    "\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\220\0\300\0\60\0\360"+
    "\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\60\0\60\0\60\0\60\0\60\0\60\0\60\0\u0420"+
    "\0\u0450\0\60\0\60\0\60\0\60\0\60\0\60\0\u0480"+
    "\0\300\0\u04b0\0\u04e0\0\60\0\u0510\0\u0540\0\u0570\0\u05a0"+
    "\0\u05d0\0\360\0\360\0\u0600\0\u0630\0\u0660\0\u0690\0\360"+
    "\0\u06c0\0\u06f0\0\u0720\0\u0750\0\360\0\u0780\0\u07b0\0\u07e0"+
    "\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\60\0\60\0\u0900"+
    "\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\360\0\u0a20\0\u0a50"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\360\0\u0b70\0\u0ba0"+
    "\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\360\0\u0c90\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\360\0\u0d50\0\u0d80\0\u0db0\0\360\0\360\0\360"+
    "\0\360\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00"+
    "\0\u0f30\0\u0f60\0\360\0\360\0\360\0\u0f90\0\u0fc0\0\u0ff0"+
    "\0\360\0\360\0\360\0\u1020\0\u1050\0\u0f30\0\u1080\0\u10b0"+
    "\0\u10e0\0\360\0\u1110\0\360\0\u1140\0\u1170\0\360\0\360"+
    "\0\360\0\u11a0\0\u11d0\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\11\1\2\1\13\1\14\1\10\1\15"+
    "\1\16\1\10\1\17\1\20\1\10\1\21\1\22\1\23"+
    "\1\10\1\24\1\10\1\25\1\26\2\10\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\4\47\1\50"+
    "\1\51\54\47\1\4\1\47\1\50\1\51\56\47\1\52"+
    "\1\53\56\47\1\50\1\51\1\54\55\47\1\50\1\51"+
    "\1\47\5\10\1\47\25\10\22\47\1\50\1\51\1\47"+
    "\1\55\1\47\3\11\1\47\25\55\22\47\1\50\1\51"+
    "\1\47\1\55\1\47\1\56\2\12\1\57\25\55\22\47"+
    "\1\50\1\51\1\47\5\10\1\47\1\10\1\60\1\10"+
    "\1\61\21\10\22\47\1\50\1\51\1\47\5\10\1\47"+
    "\11\10\1\62\3\10\1\63\7\10\22\47\1\50\1\51"+
    "\1\47\5\10\1\47\2\10\1\64\2\10\1\65\17\10"+
    "\22\47\1\50\1\51\1\47\5\10\1\47\11\10\1\66"+
    "\13\10\22\47\1\50\1\51\1\47\5\10\1\47\5\10"+
    "\1\67\7\10\1\70\7\10\22\47\1\50\1\51\1\47"+
    "\5\10\1\47\11\10\1\71\2\10\1\72\5\10\1\73"+
    "\2\10\22\47\1\50\1\51\1\47\5\10\1\47\3\10"+
    "\1\74\21\10\22\47\1\50\1\51\1\47\5\10\1\47"+
    "\1\10\1\75\4\10\1\76\16\10\22\47\1\50\1\51"+
    "\1\47\5\10\1\47\11\10\1\77\2\10\1\100\10\10"+
    "\22\47\1\50\1\51\1\47\5\10\1\47\4\10\1\101"+
    "\20\10\22\47\1\50\1\51\1\47\5\10\1\47\1\10"+
    "\1\102\23\10\22\47\1\50\1\51\1\47\5\10\1\47"+
    "\1\10\1\103\23\10\22\47\1\50\1\51\1\47\5\10"+
    "\1\47\11\10\1\104\13\10\22\47\1\50\1\51\1\47"+
    "\5\10\1\47\4\10\1\105\20\10\22\47\1\50\1\51"+
    "\42\47\1\106\13\47\1\50\1\51\42\47\1\107\13\47"+
    "\1\52\1\0\56\47\1\52\1\51\52\47\5\53\1\110"+
    "\52\53\4\47\1\50\1\51\1\47\5\55\1\47\25\55"+
    "\22\47\1\50\1\51\1\47\1\55\1\47\1\56\2\111"+
    "\1\57\25\55\22\47\1\50\1\51\3\47\1\57\2\112"+
    "\1\57\47\47\1\50\1\51\1\47\5\10\1\47\1\10"+
    "\1\113\23\10\22\47\1\50\1\51\1\47\5\10\1\47"+
    "\10\10\1\114\14\10\22\47\1\50\1\51\1\47\5\10"+
    "\1\47\16\10\1\115\6\10\22\47\1\50\1\51\1\47"+
    "\5\10\1\47\12\10\1\116\12\10\22\47\1\50\1\51"+
    "\1\47\5\10\1\47\11\10\1\117\13\10\22\47\1\50"+
    "\1\51\1\47\5\10\1\47\7\10\1\120\15\10\22\47"+
    "\1\50\1\51\1\47\5\10\1\47\21\10\1\121\3\10"+
    "\22\47\1\50\1\51\1\47\5\10\1\47\3\10\1\122"+
    "\21\10\22\47\1\50\1\51\1\47\5\10\1\47\23\10"+
    "\1\123\1\10\22\47\1\50\1\51\1\47\5\10\1\47"+
    "\4\10\1\124\12\10\1\125\5\10\22\47\1\50\1\51"+
    "\1\47\5\10\1\47\24\10\1\126\22\47\1\50\1\51"+
    "\1\47\5\10\1\47\6\10\1\127\16\10\22\47\1\50"+
    "\1\51\1\47\5\10\1\47\6\10\1\130\16\10\22\47"+
    "\1\50\1\51\1\47\5\10\1\47\2\10\1\131\22\10"+
    "\22\47\1\50\1\51\1\47\5\10\1\47\5\10\1\132"+
    "\17\10\22\47\1\50\1\51\1\47\5\10\1\47\12\10"+
    "\1\133\12\10\22\47\1\50\1\51\1\47\5\10\1\47"+
    "\1\10\1\134\23\10\22\47\1\50\1\51\1\47\5\10"+
    "\1\47\11\10\1\135\13\10\16\47\5\53\1\136\1\137"+
    "\51\53\4\47\1\50\1\51\1\47\1\55\1\47\3\111"+
    "\1\47\25\55\22\47\1\50\1\51\3\47\3\112\50\47"+
    "\1\50\1\51\1\47\5\10\1\47\2\10\1\140\22\10"+
    "\22\47\1\50\1\51\1\47\5\10\1\47\6\10\1\141"+
    "\16\10\22\47\1\50\1\51\1\47\5\10\1\47\3\10"+
    "\1\142\2\10\1\143\16\10\22\47\1\50\1\51\1\47"+
    "\5\10\1\47\4\10\1\144\20\10\22\47\1\50\1\51"+
    "\1\47\5\10\1\47\3\10\1\145\21\10\22\47\1\50"+
    "\1\51\1\47\5\10\1\47\3\10\1\146\21\10\22\47"+
    "\1\50\1\51\1\47\5\10\1\47\5\10\1\147\17\10"+
    "\22\47\1\50\1\51\1\47\5\10\1\47\3\10\1\150"+
    "\21\10\22\47\1\50\1\51\1\47\5\10\1\47\12\10"+
    "\1\151\12\10\22\47\1\50\1\51\1\47\5\10\1\47"+
    "\1\10\1\152\23\10\22\47\1\50\1\51\1\47\5\10"+
    "\1\47\7\10\1\153\15\10\22\47\1\50\1\51\1\47"+
    "\5\10\1\47\2\10\1\154\22\10\22\47\1\50\1\51"+
    "\1\47\5\10\1\47\16\10\1\155\6\10\22\47\1\50"+
    "\1\51\1\47\5\10\1\47\16\10\1\156\6\10\22\47"+
    "\1\50\1\51\1\47\5\10\1\47\21\10\1\157\3\10"+
    "\22\47\1\50\1\51\1\47\5\10\1\47\17\10\1\160"+
    "\5\10\16\47\5\53\1\136\1\161\51\53\60\0\4\47"+
    "\1\50\1\51\1\47\5\10\1\47\3\10\1\162\21\10"+
    "\22\47\1\50\1\51\1\47\5\10\1\47\5\10\1\163"+
    "\17\10\22\47\1\50\1\51\1\47\5\10\1\47\15\10"+
    "\1\164\7\10\22\47\1\50\1\51\1\47\5\10\1\47"+
    "\22\10\1\165\2\10\22\47\1\50\1\51\1\47\5\10"+
    "\1\47\10\10\1\166\14\10\22\47\1\50\1\51\1\47"+
    "\5\10\1\47\11\10\1\167\13\10\22\47\1\50\1\51"+
    "\1\47\5\10\1\47\3\10\1\170\21\10\22\47\1\50"+
    "\1\51\1\47\5\10\1\47\3\10\1\171\21\10\22\47"+
    "\1\50\1\51\1\47\5\10\1\47\3\10\1\172\21\10"+
    "\22\47\1\50\1\51\1\47\5\10\1\47\7\10\1\173"+
    "\15\10\22\47\1\50\1\51\1\47\5\10\1\47\2\10"+
    "\1\174\22\10\22\47\1\50\1\51\1\47\5\10\1\47"+
    "\3\10\1\175\21\10\16\47\5\176\1\177\52\176\4\47"+
    "\1\50\1\51\1\47\5\10\1\47\4\10\1\200\20\10"+
    "\22\47\1\50\1\51\1\47\5\10\1\47\3\10\1\201"+
    "\21\10\22\47\1\50\1\51\1\47\5\10\1\47\12\10"+
    "\1\202\12\10\22\47\1\50\1\51\1\47\5\10\1\47"+
    "\2\10\1\203\22\10\22\47\1\50\1\51\1\47\5\10"+
    "\1\47\3\10\1\204\21\10\22\47\1\50\1\51\1\47"+
    "\5\10\1\47\12\10\1\205\12\10\16\47\5\176\1\206"+
    "\1\0\51\176\4\47\1\50\1\51\1\47\5\10\1\47"+
    "\5\10\1\207\17\10\22\47\1\50\1\51\1\47\5\10"+
    "\1\47\11\10\1\210\13\10\22\47\1\50\1\51\1\47"+
    "\5\10\1\47\5\10\1\211\17\10\22\47\1\50\1\51"+
    "\1\47\5\10\1\47\21\10\1\212\3\10\16\47\5\176"+
    "\1\206\52\176\4\47\1\50\1\51\1\47\5\10\1\47"+
    "\11\10\1\213\13\10\22\47\1\50\1\51\1\47\5\10"+
    "\1\47\3\10\1\214\21\10\16\47";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4608];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\45\1\4\0\35\1\1\0\26\1\1\11\37\1"+
    "\1\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OberonScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OberonScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2318) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException, LexicalException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [71] { return Lexical.READ; }");
          { return Lexical.READ;
          }
        case 54: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [53] { return Lexical.ELSE; }");
          { return Lexical.ELSE;
          }
        case 55: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [116] { if(yylength() > 24)"+ZZ_NL+"                                        throw new IllegalIdentifierLengthException();"+ZZ_NL+"                                   return Lexical.Identifier; }");
          { if(yylength() > 24)
                                        throw new IllegalIdentifierLengthException();
                                   return Lexical.Identifier;
          }
        case 56: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [96] { return Lexical.NOTEQ; }");
          { return Lexical.NOTEQ;
          }
        case 57: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [80] { return Lexical.LPAREN; }");
          { return Lexical.LPAREN;
          }
        case 58: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [81] { return Lexical.RPAREN; }");
          { return Lexical.RPAREN;
          }
        case 59: break;
        case 49: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [61] { return Lexical.MODULE; }");
          { return Lexical.MODULE;
          }
        case 60: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [94] { return Lexical.LTEQ; }");
          { return Lexical.LTEQ;
          }
        case 61: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [90] { return Lexical.EQ; }");
          { return Lexical.EQ;
          }
        case 62: break;
        case 50: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [48] { return Lexical.BOOLEAN; }");
          { return Lexical.BOOLEAN;
          }
        case 63: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [76] { return Lexical.TRUE; }");
          { return Lexical.TRUE;
          }
        case 64: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [98] { return Lexical.PLUS; }");
          { return Lexical.PLUS;
          }
        case 65: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [99] { return Lexical.MINUS; }");
          { return Lexical.MINUS;
          }
        case 66: break;
        case 52: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [73] { return Lexical.WRITELN; }");
          { return Lexical.WRITELN;
          }
        case 67: break;
        case 51: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [49] { return Lexical.INTEGER; }");
          { return Lexical.INTEGER;
          }
        case 68: break;
        case 45: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [51] { return Lexical.WHILE; }");
          { return Lexical.WHILE;
          }
        case 69: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [52] { return Lexical.IF; }");
          { return Lexical.IF;
          }
        case 70: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [109] { return Lexical.Comment; }");
          { return Lexical.Comment;
          }
        case 71: break;
        case 47: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [56] { return Lexical.CONST; }");
          { return Lexical.CONST;
          }
        case 72: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [92] { return Lexical.LT; }");
          { return Lexical.LT;
          }
        case 73: break;
        case 48: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [64] { return Lexical.RECORD; }");
          { return Lexical.RECORD;
          }
        case 74: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [106] { throw new IllegalOctalException(); }");
          { throw new IllegalOctalException();
          }
        case 75: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [82] { return Lexical.LBRACK; }");
          { return Lexical.LBRACK;
          }
        case 76: break;
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [119] { throw new IllegalSymbolException(); }");
          { throw new IllegalSymbolException();
          }
        case 77: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [100] { return Lexical.MULT; }");
          { return Lexical.MULT;
          }
        case 78: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [83] { return Lexical.RBRACK; }");
          { return Lexical.RBRACK;
          }
        case 79: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [95] { return Lexical.GTEQ; }");
          { return Lexical.GTEQ;
          }
        case 80: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [67] { return Lexical.VAR; }");
          { return Lexical.VAR;
          }
        case 81: break;
        case 43: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [65] { return Lexical.ARRAY; }");
          { return Lexical.ARRAY;
          }
        case 82: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [66] { return Lexical.OF; }");
          { return Lexical.OF;
          }
        case 83: break;
        case 44: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [72] { return Lexical.WRITE; }");
          { return Lexical.WRITE;
          }
        case 84: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [58] { return Lexical.END; }");
          { return Lexical.END;
          }
        case 85: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [62] { return Lexical.TYPE; }");
          { return Lexical.TYPE;
          }
        case 86: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [105] { throw new IllegalIntegerException(); }");
          { throw new IllegalIntegerException();
          }
        case 87: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [84] { return Lexical.SEMICOLON; }");
          { return Lexical.SEMICOLON;
          }
        case 88: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [70] { return Lexical.OR; }");
          { return Lexical.OR;
          }
        case 89: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [69] { return Lexical.MOD; }");
          { return Lexical.MOD;
          }
        case 90: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [110] { throw new MismatchedCommentException(); }");
          { throw new MismatchedCommentException();
          }
        case 91: break;
        case 46: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [77] { return Lexical.FALSE; }");
          { return Lexical.FALSE;
          }
        case 92: break;
        case 41: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [57] { return Lexical.BEGIN; }");
          { return Lexical.BEGIN;
          }
        case 93: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [86] { return Lexical.COMMA; }");
          { return Lexical.COMMA;
          }
        case 94: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [102] { if(yylength() > 12)"+ZZ_NL+"                                        throw new IllegalIntegerRangeException();"+ZZ_NL+"                                   return Lexical.Integer; }");
          { if(yylength() > 12)
                                        throw new IllegalIntegerRangeException();
                                   return Lexical.Integer;
          }
        case 95: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [113] { return Lexical.WhiteSpace; }");
          { return Lexical.WhiteSpace;
          }
        case 96: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [87] { return Lexical.DOT; }");
          { return Lexical.DOT;
          }
        case 97: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [68] { return Lexical.DIV; }");
          { return Lexical.DIV;
          }
        case 98: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [50] { return Lexical.DO; }");
          { return Lexical.DO;
          }
        case 99: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [85] { return Lexical.COLON; }");
          { return Lexical.COLON;
          }
        case 100: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [91] { return Lexical.GT; }");
          { return Lexical.GT;
          }
        case 101: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [97] { return Lexical.AND; }");
          { return Lexical.AND;
          }
        case 102: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [93] { return Lexical.NOT; }");
          { return Lexical.NOT;
          }
        case 103: break;
        case 42: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [54] { return Lexical.ELSIF; }");
          { return Lexical.ELSIF;
          }
        case 104: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [55] { return Lexical.THEN; }");
          { return Lexical.THEN;
          }
        case 105: break;
        case 53: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [63] { return Lexical.PROCEDURE; }");
          { return Lexical.PROCEDURE;
          }
        case 106: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return Lexical.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java OberonScanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        OberonScanner scanner = null;
        try {
          scanner = new OberonScanner( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
